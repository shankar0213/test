import paramiko
import pandas as pd
import getpass

# Function to establish SSH connection
def establish_ssh_connection(host, user, password, port):
    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(host, port=port, username=user, password=password)
        return ssh_client
    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        return None

# Function to run Beeline query
def run_beeline_query(ssh_client, query):
    try:
        query_file_path = "/tmp/query_script.sql"

        # Write query to file on remote server
        sftp = ssh_client.open_sftp()
        with sftp.open(query_file_path, "w") as query_file:
            query_file.write(query)
        sftp.close()

        # Run Beeline with query script
        beeline_cmd = f'beeline -n {ssh_client.get_transport().get_username()} --outputformat=tsv2 -f {query_file_path}'
        stdin, stdout, stderr = ssh_client.exec_command(beeline_cmd)

        output = stdout.read().decode()
        error = stderr.read().decode()

        if error:
            print(f"‚ùå Beeline Error:\n{error}")
            return None

        # Parse output into DataFrame
        lines = output.strip().split("\n")
        if len(lines) < 2:
            print("‚ö†Ô∏è No data returned from query.")
            return None

        headers = lines[0].split("\t")
        data = [line.split("\t") for line in lines[1:] if line]
        df = pd.DataFrame(data, columns=headers)

        # Clean up query file
        ssh_client.exec_command(f"rm {query_file_path}")

        return df

    except Exception as e:
        print(f"‚ùå Error executing query: {e}")
        return None

# Main CLI-style logic
def main():
    print("üîê SSH to Hive Server")

    ssh_host = input("SSH Host: ").strip()
    ssh_user = input("SSH Username: ").strip()
    ssh_password = getpass.getpass("SSH Password: ")
    ssh_port_input = input("SSH Port (default 22): ").strip()
    ssh_port = int(ssh_port_input) if ssh_port_input else 22

    ssh_client = establish_ssh_connection(ssh_host, ssh_user, ssh_password, ssh_port)

    if not ssh_client:
        return

    print("‚úÖ SSH Connection Established")

    query = input("\nüì• Enter your Hive query (end with a semicolon `;`):\n> ").strip()

    df = run_beeline_query(ssh_client, query)

    if df is not None:
        print("\nüìä Query Results:")
        print(df)
    else:
        print("‚ö†Ô∏è Query returned no results or failed.")

    ssh_client.close()
    print("üîí SSH connection closed.")

if __name__ == "__main__":
    main()



--------------
py 11 ---> venv
venv\Scripts\pip.exe install pandas --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org

