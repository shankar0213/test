def run_beeline_query(ssh_client, query):
    try:
        query_file_path = "/tmp/query_script.sql"

        hive_settings = """\
set hive.cli.print.header=true;
set hive.fetch.task.conversion=none;
set hive.optimize.skewjoin=false;
set hive.limit.optimize.enable=false;
set hive.support.quoted.identifiers=none;
"""
        full_query = hive_settings + "\n" + query

        sftp = ssh_client.open_sftp()
        with sftp.open(query_file_path, "w") as f:
            f.write(full_query)
        sftp.close()

        beeline_cmd = (
            f"beeline -S --outputformat=tsv2 --verbose=false --silent=true "
            f"-n {ssh_client.get_transport().get_username()} -f {query_file_path}"
        )

        stdin, stdout, stderr = ssh_client.exec_command(beeline_cmd)

        output = stdout.read().decode()
        error = stderr.read().decode()

        if error.strip():
            print(f"⚠️ Beeline stderr output:\n{error}")

        lines = output.strip().split('\n')

        # Find header line index by detecting the first line with tabs (assuming headers contain tabs)
        header_idx = None
        for i, line in enumerate(lines):
            # Heuristic: header line often has tabs and no empty fields
            if '\t' in line and all(field.strip() != '' for field in line.split('\t')):
                header_idx = i
                break

        if header_idx is None:
            print("⚠️ Could not find header row in output.")
            return None

        headers = lines[header_idx].split('\t')
        data_lines = lines[header_idx+1:]

        data = [line.split('\t') for line in data_lines if line.strip()]

        if not data:
            print("⚠️ No data rows found after header.")
            return None

        df = pd.DataFrame(data, columns=headers)

        ssh_client.exec_command(f"rm {query_file_path}")

        return df

    except Exception as e:
        print(f"❌ Error executing query: {e}")
        return None





--------------
py 11

PS C:\Users\bankid\Music> venv\Scripts\python.exe -c "import platform; print(platform.python_version()); print(platform.architecture())"


PS C:\Users\bankid\Music> py -3.11 -m venv venv
   
PS C:\Users\bankid\Music> venv\Scripts\pip.exe install pandas --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org
PS C:\Users\bankid\Music> venv\Scripts\python.exe test1.py

