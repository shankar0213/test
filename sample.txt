
def run_beeline_query(ssh_client, query):
    try:
        query_file_path = "/tmp/query_script.sql"
        
        # Add Hive configs + actual query
        full_query = """\
set hive.cli.print.header=true;
set hive.fetch.task.conversion=none;
set hive.optimize.skewjoin=false;
set hive.limit.optimize.enable=false;
set hive.support.quoted.identifiers=none;
""" + "\n" + query
        
        sftp = ssh_client.open_sftp()
        with sftp.open(query_file_path, "w") as query_file:
            query_file.write(full_query)
        sftp.close()

        beeline_cmd = (
            f"beeline -S --outputformat=tsv2 --verbose=false --silent=true "
            f"-n {ssh_client.get_transport().get_username()} -f {query_file_path}"
        )
        
        stdin, stdout, stderr = ssh_client.exec_command(beeline_cmd)
        
        output = stdout.read().decode()
        error = stderr.read().decode()

        if error.strip():
            print(f"‚ùå Beeline Error:\n{error}")
            # Sometimes warnings/errors come in stderr but don't prevent results
            # You may want to comment out return None to still parse output
            # return None

        lines = output.strip().split('\n')
        if len(lines) < 2:
            print("‚ö†Ô∏è No data returned from query.")
            return None

        headers = lines[0].split('\t')
        data = [line.split('\t') for line in lines[1:] if line]

        df = pd.DataFrame(data, columns=headers)

        ssh_client.exec_command(f"rm {query_file_path}")

        return df

    except Exception as e:
        print(f"‚ùå Error executing query: {e}")
        return None

-----------

beeline_cmd = f'beeline --incremental=true --outputformat=tsv2 --maxRows=1000000 -n {ssh_client.get_transport().get_username()} -f {query_file_path}'

import paramiko
import pandas as pd
import getpass

def establish_ssh_connection(host, user, password, port):
    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(host, port=port, username=user, password=password)
        return ssh_client
    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        return None

def run_beeline_query(ssh_client, query):
    try:
        query_file_path = "/tmp/query_script.sql"

        # Write query to remote file
        sftp = ssh_client.open_sftp()
        with sftp.open(query_file_path, "w") as query_file:
            query_file.write(query)
        sftp.close()

        # Run beeline with silent mode and TSV output
        beeline_cmd = f'beeline -S --outputformat=tsv2 -n {ssh_client.get_transport().get_username()} -f {query_file_path}'
        stdin, stdout, stderr = ssh_client.exec_command(beeline_cmd)

        output = stdout.read().decode()
        error = stderr.read().decode()

        if error.strip():
            print(f"‚ùå Beeline Error:\n{error}")
            return None

        lines = output.strip().split('\n')
        if len(lines) < 2:
            print("‚ö†Ô∏è No data returned from query.")
            return None

        headers = lines[0].split('\t')
        data = [line.split('\t') for line in lines[1:] if line]

        df = pd.DataFrame(data, columns=headers)

        # Clean up remote query file
        ssh_client.exec_command(f"rm {query_file_path}")

        return df

    except Exception as e:
        print(f"‚ùå Error executing query: {e}")
        return None

def main():
    print("üîê SSH to Hive Server")

    ssh_host = input("SSH Host: ").strip()
    ssh_user = input("SSH Username: ").strip()
    ssh_password = getpass.getpass("SSH Password: ")
    ssh_port_input = input("SSH Port (default 22): ").strip()
    ssh_port = int(ssh_port_input) if ssh_port_input else 22

    ssh_client = establish_ssh_connection(ssh_host, ssh_user, ssh_password, ssh_port)

    if not ssh_client:
        return

    print("‚úÖ SSH Connection Established")

    query = input("\nüì• Enter your Hive query (end with a semicolon `;`):\n> ").strip()

    df = run_beeline_query(ssh_client, query)

    if df is not None:
        print("\nüìä Query Results:")
        print(df.to_string(index=False))
    else:
        print("‚ö†Ô∏è Query returned no results or failed.")

    ssh_client.close()
    print("üîí SSH connection closed.")

if __name__ == "__main__":
    main()



--------------
py 11

PS C:\Users\bankid\Music> venv\Scripts\python.exe -c "import platform; print(platform.python_version()); print(platform.architecture())"


PS C:\Users\bankid\Music> py -3.11 -m venv venv
   
PS C:\Users\bankid\Music> venv\Scripts\pip.exe install pandas --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org
PS C:\Users\bankid\Music> venv\Scripts\python.exe test1.py

