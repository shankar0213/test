import paramiko
import pandas as pd
import getpass

def establish_ssh_connection(host, user, password, port=22):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, port=port, username=user, password=password)
        return ssh
    except Exception as e:
        print(f"Connection error: {e}")
        return None

def extract_table_from_beeline_output(output_lines):
    table_started = False
    headers = []
    data = []
    for line in output_lines:
        line = line.strip()

        # Detect start of table
        if not table_started:
            if line.startswith('+') and '|' in line:
                table_started = True
                continue  # skip border line

        elif table_started:
            if line.startswith('+'):
                continue  # skip separator lines

            if line.startswith('|') and line.endswith('|'):
                columns = [col.strip() for col in line.strip('|').split('|')]
                if not headers:
                    headers = columns  # first row after +---+ is header
                else:
                    data.append(columns)
            else:
                # Table ended
                break

    if headers and data:
        return pd.DataFrame(data, columns=headers)
    else:
        return None

def run_beeline_query(ssh_client, query):
    query_file = "/tmp/query_script.sql"

    # Write query to file
    sftp = ssh_client.open_sftp()
    with sftp.open(query_file, "w") as f:
        f.write(query)
    sftp.close()

    # Execute query
    cmd = f'beeline -n {ssh_client.get_transport().get_username()} -f {query_file}'
    stdin, stdout, stderr = ssh_client.exec_command(cmd)

    # Read outputs
    output = stdout.read().decode("utf-8", errors="ignore")
    error = stderr.read().decode("utf-8", errors="ignore")

    # Print stderr for debug
    if error.strip():
        print("⚠️ STDERR:")
        print(error)

    output_lines = output.strip().splitlines()

    # Parse table from Beeline output
    df = extract_table_from_beeline_output(output_lines)

    # Cleanup
    ssh_client.exec_command(f"rm {query_file}")

    return df

def main():
    print("🔐 SSH to Hive Server")
    host = input("Host: ").strip()
    user = input("Username: ").strip()
    password = getpass.getpass("Password: ")
    port = 22

    ssh_client = establish_ssh_connection(host, user, password, port)
    if not ssh_client:
        return

    print("✅ Connected.")

    print("\n📥 Enter Hive query (end with semicolon `;`):")
    query_lines = []
    while True:
        line = input()
        query_lines.append(line)
        if line.strip().endswith(';'):
            break
    query = "\n".join(query_lines)

    df = run_beeline_query(ssh_client, query)

    if df is not None:
        print("\n📊 Query Result:")
        print(df.to_string(index=False))
    else:
        print("⚠️ Could not extract table data.")

    ssh_client.close()
    print("🔒 Connection closed.")

if __name__ == "__main__":
    main()






--------------
py 11

PS C:\Users\bankid\Music> venv\Scripts\python.exe -c "import platform; print(platform.python_version()); print(platform.architecture())"


PS C:\Users\bankid\Music> py -3.11 -m venv venv
   
PS C:\Users\bankid\Music> venv\Scripts\pip.exe install pandas --trusted-host pypi.org --trusted-host files.pythonhosted.org --trusted-host pypi.python.org
PS C:\Users\bankid\Music> venv\Scripts\python.exe test1.py

